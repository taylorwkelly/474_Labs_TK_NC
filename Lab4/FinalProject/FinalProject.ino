/* University of Washington
 * ECE/CSE 474,  06/09/2023
 *
 *   Noah Crouch
 *   Taylor Kelly
 *
 *   Lab 4: Final Project
 *
    Program that uses ChatGPT and a LCD display in order to generate sentences
    from a list of adjectives, of which the user selects 5.
 */


#include "Lab4.h"
#include <queue.h>

/*
Function Prototypes for the various FreeRTOS tasks
*/
void LEDControl(void*);
void LCDControl(void*);
void ScrollHandler(void*);
void SelectHandler(void*);


// Instantiating LCD display and it's various pins used
int rs = PIN22, enable = PIN23, d0 = PIN24, d1 = PIN25, d2 = PIN26, d3 = PIN27,
d4 = PIN28, d5 = PIN29, d6 = PIN30, d7 = PIN31;
LiquidCrystal lcd(rs, enable, d0, d1, d2, d3, d4, d5, d6, d7);

// Instantiating Pins for the 5 LED's
int LED1 = PIN12, LED2 = PIN11, LED3 = PIN10, LED4 = PIN9, LED5 = PIN8;

// Initializing queues for communication between tasks
QueueHandle_t scrollQueue, lcdQueue, ledQueue;

// Setup function
void setup() {
    // Starting the queues, and setting initial values
    scrollQueue = xQueueCreate(2, sizeof(int));
    lcdQueue = xQueueCreate(2, sizeof(int));
    ledQueue = xQueueCreate(2, sizeof(int));
    int joyVal = 500;
    int ledVal = 0;
    xQueueSendToBack(ledQueue, &ledVal, 0);
    xQueueSendToBack(lcdQueue, &joyVal, 0);
    xQueueSendToBack(scrollQueue, &joyVal, 0);

    // Begins LCD Display
    lcd.begin(16,2);
    lcd.clear();

    int led_pins[5] = {LED1, LED2, LED3, LED4, LED5};
    for (int pin = 0; pin < 5; pin++) 
        pinMode(led_pins[pin], OUTPUT);

    // Task Definitions for FreeRTOS

    // Task to control the LED's
    xTaskCreate(
        LEDControl,
        "LED Controller",
        128,
        NULL,
        1,
        NULL
    );

    xTaskCreate(
        ScrollHandler,
        "X Value Reader",
        128,
        NULL,
        3,
        NULL
    );

    xTaskCreate(
        SelectHandler,
        "Y Value Reader",
        128,
        NULL,
        3,
        NULL
    );

    xTaskCreate(
        LCDControl,
        "LCD Controller",
        1024,
        NULL,
        1,
        NULL
    );
    
    vTaskStartScheduler();
}
void loop() { /*no looping?*/  }


/*
sendToPython function
Takes in a number of words, which are sent to a python program, and waits for the python program to respond
Once a response is found, returns the response.

  Input: char* selections [5], representing 5 adjectives that are selected to send to python
    These pointers point to a given list of adjectives provided in Lab4.h

  Output: String, representing the sentence generated by ChatGPT using the given words.
*/
String sendToPython(char* selections[5]) {
    Serial.begin(19200);

    while (!Serial) {
        ;
    }


    // Sends Message to Serial to be read by Python
    Serial.println("Requesting Pair");
    while (1) {
        // Waits for connection response
        String str = Serial.readStringUntil('\n');
        if (str == "Paired") break;
    }
    
    // Formats the words into one string, and sends to the buffer
    String inbytes = "";
    char message[100];
    snprintf(message, 100, "%s %s %s %s %s", selections[0],
    selections[1], selections[2], selections[3], selections[4]);

    // Prints message to Serial to be read by Python
    Serial.println(message);
    Serial.println("Done");

    // Gets response from python (which got response from ChatGPT)
    String result = "";
    while(1) {
        inbytes = Serial.readStringUntil('\n');
        if (inbytes == "Done") break;
        result += inbytes;
    }
    Serial.end();
    // Returns the ChatGPT message
    return result;
}


/*
LEDControl Task
Controls the behavior for the offboard LED's that represent how many words are currently selected
No inputs, and no Outputs

Uses the ledqueue to receive information about if an LED should be turned off.
*/

void LEDControl(void* pvParameters) {
    int num_selected = 0;
    int leds[5] = {LED1, LED2, LED3, LED4, LED5};
    int value;
    for (;;) {
        while (num_selected < 5) {
            xQueueReceive(ledQueue, &value, 0);
            num_selected += value > 980 ? 1 : 0;
            for (int led = 0; led < 5; led++) {
                if (num_selected > led) {
                    digitalWrite(leds[led], LOW);
                } else {
                    digitalWrite(leds[led], HIGH);
                }
            }
            value = 0;
            vTaskDelay(50 / portTICK_PERIOD_MS);
        }
    }
}

/*
LCDControl Task
Controls the Behavior for the LCD Display
Shows the adjectives to be selected, and displays the sentence after getting response from chatGPT
No inputs, and no Outputs

Receives data from scrollQueue to determine when and which way to scroll on adjective list
Receives data from LCD queue to select which adjective is used.
*/
void LCDControl(void* pvParameters) {
    int index = 0, num_selected = 0;
    char* selected[5];
    int value;
    int select;
    int displayed = 0;
    for (;;) {
        while (num_selected < 5) {
            xQueueReceive(scrollQueue, &value, 1);
            xQueueReceive(lcdQueue, &select, 1);
            // Checks to see if user selected an adjective
            if (select > 980) {
                selected[num_selected] = adjectives[index];
                num_selected++;
            }

            // Determines scroll direction
            int down = value > 980 ? 1 : 0;
            int up = value < 95 ? 1 : 0;

            // Sets index based upon scroll data
            if (up && !down) {
                index++;
            } else if (down && !up) {
                index--;
            }

            // Loops around the list should it reach the end
            if (index > 90) index = 0;
            else if (index < 0) index = 90;


            // Displays the adjectives at the current index, and the next index
            lcd.setCursor(0,0);
            lcd.print(adjectives_lcd[index]);
            lcd.setCursor(0,1);
            lcd.print(adjectives_lcd[(index + 1 > 90) ? 0 : index + 1]);
            lcd.setCursor(14, 0);
            lcd.print("<");
            lcd.setCursor(15, 0);
            lcd.blink();
            vTaskDelay(50 / portTICK_PERIOD_MS);
            // Sets default values again
            value = 500;
            select = 0;
        }

        // After the adjectives are selected, displays the response on the LCD display
        if (displayed == 0) {
            // Turns off blinking cursor
            lcd.noBlink();
            // Gets message from ChatGPT
            String message = sendToPython(selected);
           

            // Breaks up the message into individual characters to be displayed on the LCD
            int len = message.length();
            // Amount of times the display needs to update to show all characters
            int layers = (len / 16) + 1;
            // Divides string into layers, with null character at the end.
            // [Line displayed][Character index]
            char message_split[layers][17];
            for (int i = 0; i < layers; i++) {
                for (int j = 0; j < 16; j++) {
                    if (i*16 + j > len) {
                        // Pads the end of the message
                        char* space = " ";
                        message_split[i][j] = *space;
                    } else {
                        message_split[i][j] = message[i*16 + j];
                    }
                }
                // Null terminates the string
                message_split[i][16] = '\0';
            }
            lcd.clear();        
            lcd.setCursor(15, 0);
            // Displays the lines, and scrolls through them vertically
            for (int i = 0; i < layers - 1; i++) {
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print(message_split[i]);
                lcd.setCursor(0, 1);
                lcd.print(message_split[i + 1]);
                vTaskDelay(2000 / portTICK_PERIOD_MS);
            }
            lcd.clear();
            }
            // Stops the program
            displayed = 1;
    }
}


/*
ScrollHandler Task
Gets input from the joystick, and returns information about whether to scroll up or down
on the adjective list.
No Inputs, No Outputs

Sends joystick data to the scrollQueue about position of the joysticks
*/
void ScrollHandler(void* pvParameters) {
    int value;
    int wait = 0;
    for (;;) {
        value = analogRead(XVALUEPIN);
        if ((value > 980 || value < 95) && !wait) {
            xQueueSendToBack(scrollQueue, &value, 1);
            wait = 1;
        } else {
            vTaskDelay(200 / portTICK_PERIOD_MS);
            wait = 0;
        }
        vTaskDelay(20 / portTICK_PERIOD_MS);
    }
}

/*
SelectHandler Task
Gets input from the joystick, and returns information about whether to select the current adjective
on the list
No Inputs, No Outputs

Sends joystick data to the ledQueue and lcdQueue about if an adjective is selected.
*/
void SelectHandler(void* pvParameters) {
    int value;
    int wait = 0;
    for (;;) {
        value = analogRead(YVALUEPIN);
        if (value > 980 && !wait) {
            xQueueSendToBack(ledQueue, &value, 1);
            xQueueSendToBack(lcdQueue, &value, 1);
            wait = 1;
        } else {
            vTaskDelay(200 / portTICK_PERIOD_MS);
            wait = 0;
        }
        vTaskDelay(20 / portTICK_PERIOD_MS);
    }
}

